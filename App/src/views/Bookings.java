/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package views;

import config.BookingsConfig;
import config.RoomsConfig;
import controllers.BookingController;
import controllers.CalculateDays;
import controllers.EmailValidator;
import controllers.RoomsUpdate;
import java.awt.HeadlessException;
import java.awt.event.KeyEvent;
import java.time.LocalDate;
import java.time.LocalDateTime;
import java.time.ZoneId;
import java.time.format.DateTimeFormatter;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashSet;
import java.util.UUID;
import javax.swing.DefaultComboBoxModel;
import javax.swing.ImageIcon;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import model.Booking;
import model.Room;
import model.Customer;

/**
 *
 * @author USER
 */
public class Bookings extends javax.swing.JFrame {
    private ArrayList<Booking> bookings = new BookingsConfig().bookings;
    private final ArrayList<Room> rooms = new RoomsConfig().rooms;
    private int recordNumber = 0;
    private boolean validDate = false;
    private boolean validNewDate = false;
    
    private static final DateTimeFormatter datetimeFormatter = DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss");
    
    private final CalculateDays calculator = new CalculateDays();
    /**
     * Creates new form NewBooking
     */
    Bookings() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        genderGroup = new javax.swing.ButtonGroup();
        requestGenderGroup = new javax.swing.ButtonGroup();
        jLabel4 = new javax.swing.JLabel();
        searchField = new javax.swing.JTextField();
        jPanel1 = new javax.swing.JPanel();
        jLabel7 = new javax.swing.JLabel();
        CheckoutMenu = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        RoomsMenu = new javax.swing.JLabel();
        CheckinMenu = new javax.swing.JLabel();
        BookingMenu = new javax.swing.JLabel();
        logouButton = new javax.swing.JButton();
        searchButton = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jSeparator1 = new javax.swing.JSeparator();
        jLabel13 = new javax.swing.JLabel();
        jSeparator2 = new javax.swing.JSeparator();
        jLabel14 = new javax.swing.JLabel();
        jLabel15 = new javax.swing.JLabel();
        jLabel16 = new javax.swing.JLabel();
        jLabel17 = new javax.swing.JLabel();
        jLabel18 = new javax.swing.JLabel();
        jLabel19 = new javax.swing.JLabel();
        jLabel20 = new javax.swing.JLabel();
        createdDate = new javax.swing.JLabel();
        firstQuery = new javax.swing.JButton();
        previousQuery = new javax.swing.JButton();
        nextQuery = new javax.swing.JButton();
        lastQuery = new javax.swing.JButton();
        deleteButton = new javax.swing.JButton();
        updateButton = new javax.swing.JButton();
        bookingId = new javax.swing.JLabel();
        customerName = new javax.swing.JTextField();
        personalId = new javax.swing.JTextField();
        maleButton = new javax.swing.JRadioButton();
        femaleButton = new javax.swing.JRadioButton();
        email = new javax.swing.JTextField();
        roomIdCombo = new javax.swing.JComboBox<>();
        bookingStatus = new javax.swing.JLabel();
        days = new javax.swing.JLabel();
        startDate = new org.jdesktop.swingx.JXDatePicker();
        endDate = new org.jdesktop.swingx.JXDatePicker();
        dateValidateButton = new javax.swing.JButton();
        jLabel21 = new javax.swing.JLabel();
        contactNumber = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        resetButton = new javax.swing.JButton();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        jScrollPane1 = new javax.swing.JScrollPane();
        bookingTable = new javax.swing.JTable();
        jScrollPane2 = new javax.swing.JScrollPane();
        jPanel3 = new javax.swing.JPanel();
        jLabel30 = new javax.swing.JLabel();
        requestStartDate = new org.jdesktop.swingx.JXDatePicker();
        jLabel31 = new javax.swing.JLabel();
        requestEndDate = new org.jdesktop.swingx.JXDatePicker();
        requestSearchButton = new javax.swing.JButton();
        jSeparator4 = new javax.swing.JSeparator();
        jLabel32 = new javax.swing.JLabel();
        jLabel33 = new javax.swing.JLabel();
        jLabel34 = new javax.swing.JLabel();
        jLabel35 = new javax.swing.JLabel();
        jLabel36 = new javax.swing.JLabel();
        jLabel37 = new javax.swing.JLabel();
        jLabel38 = new javax.swing.JLabel();
        requestCustomerEmail = new javax.swing.JTextField();
        addButton = new javax.swing.JButton();
        requestMaleButton = new javax.swing.JRadioButton();
        requestFemaleButton = new javax.swing.JRadioButton();
        requestPersonalID = new javax.swing.JTextField();
        requestCustomerName = new javax.swing.JTextField();
        requestAvailableRoomCombo = new javax.swing.JComboBox<>();
        requestDays = new javax.swing.JLabel();
        requestBookingID = new javax.swing.JLabel();
        jLabel39 = new javax.swing.JLabel();
        requestContactNumber = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setMinimumSize(new java.awt.Dimension(1303, 713));
        setResizable(false);
        addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentShown(java.awt.event.ComponentEvent evt) {
                formComponentShown(evt);
            }
        });

        jLabel4.setFont(new java.awt.Font("Poppins", 1, 12)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(255, 153, 153));
        jLabel4.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel4.setText("*Statement ID / Room ID / Cus Name");

        searchField.setFont(new java.awt.Font("Poppins", 0, 14)); // NOI18N
        searchField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                searchFieldKeyPressed(evt);
            }
        });

        jPanel1.setBackground(new java.awt.Color(223, 209, 187));

        jLabel7.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel7.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/systemLogoIconMenu.png"))); // NOI18N

        CheckoutMenu.setFont(new java.awt.Font("Poppins", 1, 16)); // NOI18N
        CheckoutMenu.setText("Check-out");
        CheckoutMenu.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                CheckoutMenuMouseClicked(evt);
            }
        });

        jLabel9.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel9.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/room.png"))); // NOI18N

        jLabel10.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel10.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/checkin.png"))); // NOI18N

        jLabel11.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel11.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/pay.png"))); // NOI18N

        jLabel12.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel12.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/newBooking.png"))); // NOI18N

        RoomsMenu.setFont(new java.awt.Font("Poppins", 1, 16)); // NOI18N
        RoomsMenu.setText("Room");
        RoomsMenu.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                RoomsMenuMouseClicked(evt);
            }
        });

        CheckinMenu.setFont(new java.awt.Font("Poppins", 1, 16)); // NOI18N
        CheckinMenu.setText("Check-in");
        CheckinMenu.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                CheckinMenuMouseClicked(evt);
            }
        });

        BookingMenu.setFont(new java.awt.Font("Poppins", 1, 16)); // NOI18N
        BookingMenu.setText("Booking");

        logouButton.setBackground(new java.awt.Color(255, 102, 102));
        logouButton.setFont(new java.awt.Font("Poppins", 1, 14)); // NOI18N
        logouButton.setForeground(new java.awt.Color(240, 240, 240));
        logouButton.setText("Logout");
        logouButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                logouButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel7)
                .addGap(88, 88, 88)
                .addComponent(jLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(RoomsMenu)
                .addGap(124, 124, 124)
                .addComponent(jLabel10, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(CheckinMenu)
                .addGap(134, 134, 134)
                .addComponent(jLabel11, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(CheckoutMenu)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel12, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(BookingMenu)
                .addGap(110, 110, 110)
                .addComponent(logouButton, javax.swing.GroupLayout.PREFERRED_SIZE, 102, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(35, 35, 35))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabel7, javax.swing.GroupLayout.DEFAULT_SIZE, 76, Short.MAX_VALUE)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel12)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(5, 5, 5)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(BookingMenu, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(logouButton, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(jLabel11)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(8, 8, 8)
                        .addComponent(CheckoutMenu, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jLabel10)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(9, 9, 9)
                        .addComponent(CheckinMenu, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jLabel9)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(8, 8, 8)
                        .addComponent(RoomsMenu, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );

        searchButton.setBackground(new java.awt.Color(11, 180, 212));
        searchButton.setFont(new java.awt.Font("Poppins", 1, 14)); // NOI18N
        searchButton.setForeground(new java.awt.Color(255, 255, 255));
        searchButton.setText("Search");
        searchButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchButtonActionPerformed(evt);
            }
        });

        jPanel2.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        jLabel2.setFont(new java.awt.Font("Poppins", 1, 14)); // NOI18N
        jLabel2.setText("Customer Name:");

        jLabel3.setFont(new java.awt.Font("Poppins", 1, 14)); // NOI18N
        jLabel3.setText("ID:");

        jLabel5.setFont(new java.awt.Font("Poppins", 1, 14)); // NOI18N
        jLabel5.setText("IC / Passport:");

        jLabel6.setFont(new java.awt.Font("Poppins", 1, 14)); // NOI18N
        jLabel6.setText("Gender:");

        jLabel8.setFont(new java.awt.Font("Poppins", 1, 14)); // NOI18N
        jLabel8.setText("E-mail:");

        jLabel13.setFont(new java.awt.Font("Poppins", 0, 12)); // NOI18N
        jLabel13.setText("Customer Details");

        jLabel14.setFont(new java.awt.Font("Poppins", 0, 12)); // NOI18N
        jLabel14.setText("Booking Details");

        jLabel15.setFont(new java.awt.Font("Poppins", 1, 14)); // NOI18N
        jLabel15.setText("Room Id:");

        jLabel16.setFont(new java.awt.Font("Poppins", 1, 14)); // NOI18N
        jLabel16.setText("Status:");

        jLabel17.setFont(new java.awt.Font("Poppins", 1, 14)); // NOI18N
        jLabel17.setText("Days:");

        jLabel18.setFont(new java.awt.Font("Poppins", 1, 14)); // NOI18N
        jLabel18.setText("Start Date:");

        jLabel19.setFont(new java.awt.Font("Poppins", 0, 12)); // NOI18N
        jLabel19.setText("Created At");

        jLabel20.setFont(new java.awt.Font("Poppins", 1, 14)); // NOI18N
        jLabel20.setText("End Date:");

        createdDate.setFont(new java.awt.Font("Poppins", 0, 12)); // NOI18N
        createdDate.setText("-");

        firstQuery.setBackground(new java.awt.Color(11, 180, 212));
        firstQuery.setFont(new java.awt.Font("Poppins", 1, 12)); // NOI18N
        firstQuery.setForeground(new java.awt.Color(240, 240, 240));
        firstQuery.setText("|<");
        firstQuery.setToolTipText("");
        firstQuery.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                firstQueryActionPerformed(evt);
            }
        });

        previousQuery.setBackground(new java.awt.Color(11, 180, 212));
        previousQuery.setFont(new java.awt.Font("Poppins", 1, 12)); // NOI18N
        previousQuery.setForeground(new java.awt.Color(240, 240, 240));
        previousQuery.setText("<");
        previousQuery.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                previousQueryActionPerformed(evt);
            }
        });

        nextQuery.setBackground(new java.awt.Color(11, 180, 212));
        nextQuery.setFont(new java.awt.Font("Poppins", 1, 12)); // NOI18N
        nextQuery.setForeground(new java.awt.Color(240, 240, 240));
        nextQuery.setText(">");
        nextQuery.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nextQueryActionPerformed(evt);
            }
        });

        lastQuery.setBackground(new java.awt.Color(11, 180, 212));
        lastQuery.setFont(new java.awt.Font("Poppins", 1, 12)); // NOI18N
        lastQuery.setForeground(new java.awt.Color(240, 240, 240));
        lastQuery.setText(">|");
        lastQuery.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                lastQueryActionPerformed(evt);
            }
        });

        deleteButton.setBackground(new java.awt.Color(255, 0, 51));
        deleteButton.setFont(new java.awt.Font("Poppins", 1, 14)); // NOI18N
        deleteButton.setForeground(new java.awt.Color(255, 255, 255));
        deleteButton.setText("Delete");
        deleteButton.setToolTipText("");
        deleteButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteButtonActionPerformed(evt);
            }
        });

        updateButton.setBackground(new java.awt.Color(255, 204, 0));
        updateButton.setFont(new java.awt.Font("Poppins", 1, 14)); // NOI18N
        updateButton.setForeground(new java.awt.Color(255, 255, 255));
        updateButton.setText("Update");
        updateButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updateButtonActionPerformed(evt);
            }
        });

        bookingId.setFont(new java.awt.Font("Poppins", 0, 14)); // NOI18N
        bookingId.setText("-");

        customerName.setFont(new java.awt.Font("Poppins", 0, 14)); // NOI18N

        personalId.setFont(new java.awt.Font("Poppins", 0, 14)); // NOI18N

        genderGroup.add(maleButton);
        maleButton.setFont(new java.awt.Font("Poppins", 0, 12)); // NOI18N
        maleButton.setText("M");

        genderGroup.add(femaleButton);
        femaleButton.setFont(new java.awt.Font("Poppins", 0, 12)); // NOI18N
        femaleButton.setText("F");

        email.setFont(new java.awt.Font("Poppins", 0, 14)); // NOI18N

        roomIdCombo.setFont(new java.awt.Font("Poppins", 0, 12)); // NOI18N
        roomIdCombo.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "None" }));

        bookingStatus.setFont(new java.awt.Font("Poppins", 0, 12)); // NOI18N
        bookingStatus.setText("-");

        days.setFont(new java.awt.Font("Poppins", 0, 12)); // NOI18N
        days.setText("-");

        startDate.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                startDatePropertyChange(evt);
            }
        });

        endDate.setToolTipText("");
        endDate.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                endDatePropertyChange(evt);
            }
        });

        dateValidateButton.setBackground(new java.awt.Color(102, 102, 255));
        dateValidateButton.setFont(new java.awt.Font("Poppins", 1, 12)); // NOI18N
        dateValidateButton.setForeground(new java.awt.Color(240, 240, 240));
        dateValidateButton.setText("Validate");
        dateValidateButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                dateValidateButtonActionPerformed(evt);
            }
        });

        jLabel21.setFont(new java.awt.Font("Poppins", 1, 14)); // NOI18N
        jLabel21.setText("Contact number:");

        contactNumber.setFont(new java.awt.Font("Poppins", 0, 14)); // NOI18N

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jSeparator1)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addContainerGap()
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel14)
                                    .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                        .addGroup(jPanel2Layout.createSequentialGroup()
                                            .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 134, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                            .addComponent(personalId))
                                        .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 134, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGroup(jPanel2Layout.createSequentialGroup()
                                            .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 134, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                            .addComponent(email))
                                        .addGroup(jPanel2Layout.createSequentialGroup()
                                            .addComponent(jLabel18, javax.swing.GroupLayout.PREFERRED_SIZE, 134, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                            .addComponent(startDate, javax.swing.GroupLayout.PREFERRED_SIZE, 168, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                            .addComponent(dateValidateButton)
                                            .addGap(51, 51, 51))
                                        .addGroup(jPanel2Layout.createSequentialGroup()
                                            .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 134, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                            .addComponent(customerName))
                                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                                            .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                                .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel2Layout.createSequentialGroup()
                                                    .addComponent(jLabel17, javax.swing.GroupLayout.PREFERRED_SIZE, 134, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                    .addComponent(days, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                    .addGap(0, 0, Short.MAX_VALUE))
                                                .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel2Layout.createSequentialGroup()
                                                    .addComponent(jLabel16, javax.swing.GroupLayout.PREFERRED_SIZE, 134, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                    .addComponent(bookingStatus, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                                            .addGap(208, 208, 208))
                                        .addGroup(jPanel2Layout.createSequentialGroup()
                                            .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 69, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                            .addComponent(bookingId, javax.swing.GroupLayout.PREFERRED_SIZE, 310, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addGap(196, 196, 196)
                                .addComponent(maleButton)
                                .addGap(92, 92, 92)
                                .addComponent(femaleButton)))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addComponent(jLabel15, javax.swing.GroupLayout.PREFERRED_SIZE, 134, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(roomIdCombo, javax.swing.GroupLayout.PREFERRED_SIZE, 168, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addComponent(jLabel20, javax.swing.GroupLayout.PREFERRED_SIZE, 134, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(endDate, javax.swing.GroupLayout.PREFERRED_SIZE, 168, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(firstQuery, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(lastQuery, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(previousQuery, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(nextQuery, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(25, 25, 25))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(updateButton)
                        .addGap(39, 39, 39)
                        .addComponent(deleteButton)
                        .addGap(134, 134, 134))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addComponent(jLabel13, javax.swing.GroupLayout.PREFERRED_SIZE, 111, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(80, 80, 80)
                                .addComponent(jLabel19, javax.swing.GroupLayout.PREFERRED_SIZE, 72, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(createdDate, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addComponent(jLabel21, javax.swing.GroupLayout.PREFERRED_SIZE, 134, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(contactNumber, javax.swing.GroupLayout.PREFERRED_SIZE, 286, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addComponent(jSeparator2)))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(bookingId))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel13)
                    .addComponent(jLabel19)
                    .addComponent(createdDate))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(customerName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(personalId, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(maleButton)
                        .addComponent(femaleButton))
                    .addComponent(jLabel6))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel8)
                    .addComponent(email, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel21)
                    .addComponent(contactNumber, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel14)
                .addGap(5, 5, 5)
                .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel15)
                            .addComponent(roomIdCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel16)
                            .addComponent(bookingStatus))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel17)
                            .addComponent(days))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel18)
                            .addComponent(startDate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel20)
                            .addComponent(endDate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(firstQuery)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(previousQuery)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(nextQuery)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(dateValidateButton, javax.swing.GroupLayout.PREFERRED_SIZE, 62, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lastQuery))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 18, Short.MAX_VALUE)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(deleteButton)
                    .addComponent(updateButton))
                .addContainerGap())
        );

        jLabel1.setFont(new java.awt.Font("Poppins", 1, 22)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(11, 180, 212));
        jLabel1.setText("Booking Records");

        resetButton.setFont(new java.awt.Font("Poppins", 1, 14)); // NOI18N
        resetButton.setText("Reset");
        resetButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                resetButtonActionPerformed(evt);
            }
        });

        bookingTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "Customer Name", "IC / Passport", "Gender", "Email", "Contact Number", "Room ID", "Status", "Days", "Start Date", "End Date", "Created At"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.String.class, java.lang.Byte.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Integer.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        bookingTable.getTableHeader().setReorderingAllowed(false);
        bookingTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                bookingTableMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(bookingTable);

        jTabbedPane1.addTab("Overview", jScrollPane1);

        jLabel30.setFont(new java.awt.Font("Poppins", 1, 12)); // NOI18N
        jLabel30.setText("Start Date:");

        requestStartDate.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                requestStartDatePropertyChange(evt);
            }
        });

        jLabel31.setFont(new java.awt.Font("Poppins", 1, 12)); // NOI18N
        jLabel31.setText("End Date:");

        requestEndDate.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                requestEndDatePropertyChange(evt);
            }
        });

        requestSearchButton.setBackground(new java.awt.Color(11, 180, 212));
        requestSearchButton.setFont(new java.awt.Font("Poppins", 1, 14)); // NOI18N
        requestSearchButton.setForeground(new java.awt.Color(240, 240, 240));
        requestSearchButton.setText("Search");
        requestSearchButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                requestSearchButtonActionPerformed(evt);
            }
        });

        jLabel32.setFont(new java.awt.Font("Poppins", 1, 14)); // NOI18N
        jLabel32.setText("ID:");

        jLabel33.setFont(new java.awt.Font("Poppins", 1, 14)); // NOI18N
        jLabel33.setText("Days:");

        jLabel34.setFont(new java.awt.Font("Poppins", 1, 14)); // NOI18N
        jLabel34.setText("Available Room Id:");

        jLabel35.setFont(new java.awt.Font("Poppins", 1, 14)); // NOI18N
        jLabel35.setText("Customer Name:");

        jLabel36.setFont(new java.awt.Font("Poppins", 1, 14)); // NOI18N
        jLabel36.setText("IC / Passport:");

        jLabel37.setFont(new java.awt.Font("Poppins", 1, 14)); // NOI18N
        jLabel37.setText("Gender:");

        jLabel38.setFont(new java.awt.Font("Poppins", 1, 14)); // NOI18N
        jLabel38.setText("E-mail:");

        requestCustomerEmail.setFont(new java.awt.Font("Poppins", 0, 12)); // NOI18N
        requestCustomerEmail.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                requestCustomerEmailKeyPressed(evt);
            }
        });

        addButton.setBackground(new java.awt.Color(51, 255, 51));
        addButton.setFont(new java.awt.Font("Poppins", 1, 14)); // NOI18N
        addButton.setForeground(new java.awt.Color(240, 240, 240));
        addButton.setText("Add");
        addButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addButtonActionPerformed(evt);
            }
        });

        requestGenderGroup.add(requestMaleButton);
        requestMaleButton.setFont(new java.awt.Font("Poppins", 0, 12)); // NOI18N
        requestMaleButton.setText("M");

        requestGenderGroup.add(requestFemaleButton);
        requestFemaleButton.setFont(new java.awt.Font("Poppins", 0, 12)); // NOI18N
        requestFemaleButton.setText("F");

        requestPersonalID.setFont(new java.awt.Font("Poppins", 0, 12)); // NOI18N

        requestCustomerName.setFont(new java.awt.Font("Poppins", 0, 12)); // NOI18N

        requestAvailableRoomCombo.setFont(new java.awt.Font("Poppins", 0, 12)); // NOI18N
        requestAvailableRoomCombo.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "None" }));

        requestDays.setFont(new java.awt.Font("Poppins", 0, 12)); // NOI18N
        requestDays.setText("-");

        requestBookingID.setFont(new java.awt.Font("Poppins", 0, 12)); // NOI18N
        requestBookingID.setText("-");

        jLabel39.setFont(new java.awt.Font("Poppins", 1, 14)); // NOI18N
        jLabel39.setText("Ph No.");

        requestContactNumber.setFont(new java.awt.Font("Poppins", 0, 12)); // NOI18N
        requestContactNumber.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                requestContactNumberKeyPressed(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGap(33, 33, 33)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addComponent(jLabel33, javax.swing.GroupLayout.PREFERRED_SIZE, 134, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jLabel34)
                                .addComponent(jLabel35, javax.swing.GroupLayout.PREFERRED_SIZE, 134, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jLabel32, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel36, javax.swing.GroupLayout.PREFERRED_SIZE, 113, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel37, javax.swing.GroupLayout.PREFERRED_SIZE, 134, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel38, javax.swing.GroupLayout.PREFERRED_SIZE, 134, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel39, javax.swing.GroupLayout.PREFERRED_SIZE, 113, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel3Layout.createSequentialGroup()
                                .addGap(141, 141, 141)
                                .addComponent(requestAvailableRoomCombo, javax.swing.GroupLayout.PREFERRED_SIZE, 87, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel3Layout.createSequentialGroup()
                                .addGap(97, 97, 97)
                                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(requestDays, javax.swing.GroupLayout.PREFERRED_SIZE, 211, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(requestCustomerName, javax.swing.GroupLayout.PREFERRED_SIZE, 207, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(requestPersonalID, javax.swing.GroupLayout.PREFERRED_SIZE, 207, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(jPanel3Layout.createSequentialGroup()
                                        .addComponent(requestMaleButton)
                                        .addGap(116, 116, 116)
                                        .addComponent(requestFemaleButton))
                                    .addComponent(requestCustomerEmail, javax.swing.GroupLayout.PREFERRED_SIZE, 207, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(requestBookingID, javax.swing.GroupLayout.PREFERRED_SIZE, 312, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(requestContactNumber, javax.swing.GroupLayout.PREFERRED_SIZE, 207, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGap(25, 25, 25)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jSeparator4)
                            .addGroup(jPanel3Layout.createSequentialGroup()
                                .addComponent(jLabel30, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(requestStartDate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(47, 47, 47)
                                .addComponent(jLabel31)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(requestEndDate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(requestSearchButton))))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGap(88, 88, 88)
                        .addComponent(addButton, javax.swing.GroupLayout.PREFERRED_SIZE, 265, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(67, Short.MAX_VALUE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(17, 17, 17)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel30)
                    .addComponent(requestStartDate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel31)
                    .addComponent(requestEndDate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(requestSearchButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jSeparator4, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(jLabel32)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel33))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(requestBookingID)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(requestDays)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel34)
                    .addComponent(requestAvailableRoomCombo, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel35)
                    .addComponent(requestCustomerName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel36)
                    .addComponent(requestPersonalID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(36, 36, 36)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel37)
                    .addComponent(requestMaleButton)
                    .addComponent(requestFemaleButton))
                .addGap(18, 18, 18)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel38)
                    .addComponent(requestCustomerEmail, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(14, 14, 14)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(requestContactNumber, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel39))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(addButton)
                .addContainerGap(78, Short.MAX_VALUE))
        );

        jScrollPane2.setViewportView(jPanel3);

        jTabbedPane1.addTab("New Booking", jScrollPane2);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(252, 252, 252)
                        .addComponent(jLabel1)
                        .addGap(274, 274, 274))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jTabbedPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 666, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(29, 29, 29)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(resetButton, javax.swing.GroupLayout.PREFERRED_SIZE, 89, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel4)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(searchField, javax.swing.GroupLayout.PREFERRED_SIZE, 209, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(searchButton)))))
                .addGap(35, 35, 35))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(39, 39, 39)
                        .addComponent(jLabel1))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(23, 23, 23)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(searchField, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(searchButton, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(resetButton, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel4)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTabbedPane1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 536, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        jTabbedPane1.getAccessibleContext().setAccessibleName("Overview");

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void CheckoutMenuMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_CheckoutMenuMouseClicked
        dispose();
        new CheckOuts().run();
    }//GEN-LAST:event_CheckoutMenuMouseClicked

    private void CheckinMenuMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_CheckinMenuMouseClicked
        dispose();
        new CheckIns().run();
    }//GEN-LAST:event_CheckinMenuMouseClicked

    private void logouButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_logouButtonActionPerformed
        int reply = JOptionPane.showConfirmDialog(
                null, 
                "Are you sure you want to logout?", 
                "Logout Confirmation", 
                JOptionPane.YES_NO_OPTION
        );
        if (reply == JOptionPane.YES_OPTION)
        {
            dispose();
            new Login().setVisible(true);
        }
    }//GEN-LAST:event_logouButtonActionPerformed

    private void RoomsMenuMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_RoomsMenuMouseClicked
        dispose();
        new Rooms().run();
    }//GEN-LAST:event_RoomsMenuMouseClicked

    private void searchFieldKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_searchFieldKeyPressed
        if(evt.getKeyCode() == KeyEvent.VK_ENTER)
        {
            searchRecord();
        }
    }//GEN-LAST:event_searchFieldKeyPressed

    private void searchButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchButtonActionPerformed
        searchRecord();
    }//GEN-LAST:event_searchButtonActionPerformed

    private void firstQueryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_firstQueryActionPerformed
        manipulateForm(0);
    }//GEN-LAST:event_firstQueryActionPerformed

    private void previousQueryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_previousQueryActionPerformed
        recordNumber--;
        manipulateForm(recordNumber);
    }//GEN-LAST:event_previousQueryActionPerformed

    private void nextQueryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nextQueryActionPerformed
        recordNumber++;
        manipulateForm(recordNumber);
    }//GEN-LAST:event_nextQueryActionPerformed

    private void lastQueryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_lastQueryActionPerformed
        int total = bookings.size();
        manipulateForm(total - 1);
    }//GEN-LAST:event_lastQueryActionPerformed

    private void formComponentShown(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_formComponentShown
        // Load data to interface upon interface showing
        DefaultTableModel tableModel =  (DefaultTableModel) bookingTable.getModel();
        tableModel.setRowCount(0);
        try 
        {         
            for(Booking record : bookings)
            {
                tableModel.addRow(
                        new Object[]
                        {
                            record.getBookingId(),
                            record.getCustomer().getName(),
                            record.getCustomer().getPersonalId(),
                            record.getCustomer().getGender(),
                            record.getCustomer().getEmail(),
                            record.getCustomer().getContactNumber(),
                            record.getBookedRoom(),
                            record.getStatus(),
                            record.getStayDays(),
                            record.getStartDate().toString(),
                            record.getEndDate().toString(),
                            record.getCreatedTime()
                        }
                );
            }
        } 
        catch(Exception e) 
        {
            System.err.println("No Bookings detected.");
        }
        manipulateForm(0);
        validDate = true;
        requestStartDate.setDate(new Date());
        requestEndDate.setDate(null);
        requestBookingID.setText("-");
        requestDays.setText("-");
        requestAvailableRoomCombo.removeAllItems();
        requestCustomerName.setText("");
        requestPersonalID.setText("");
        requestCustomerEmail.setText("");
        requestContactNumber.setText("");
    }//GEN-LAST:event_formComponentShown

    private void dateValidateButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_dateValidateButtonActionPerformed
        if(dateValidateButton.isEnabled())
        {
            boolean proceedable = true;
            Booking selectedRecord = bookings.get(recordNumber);
            LocalDate newStartDate = LocalDate.now();
            LocalDate newEndDate = LocalDate.now();
            LocalDate now = LocalDate.now();
            try
            {
                newStartDate = startDate.getDate().toInstant().atZone(ZoneId.systemDefault()).toLocalDate();
                newEndDate = endDate.getDate().toInstant().atZone(ZoneId.systemDefault()).toLocalDate();
            }
            catch(Exception e)
            {
                JOptionPane.showMessageDialog(
                    null, 
                    "Value is not Date", 
                    "Error Selection", 
                    JOptionPane.ERROR_MESSAGE
                );
                proceedable = false;
            }
            
            if(
               calculator.dateDifference(newStartDate, newEndDate) > 7     
            )
            {
                validNewDate = false;
                 JOptionPane.showMessageDialog(
                     null, 
                     "Reservation cannot be more than a week / 7 days.", 
                     "Date Change Error", 
                     JOptionPane.ERROR_MESSAGE
                 );
                 proceedable = false;
            }

            if(proceedable)
            {
                if(newStartDate.isAfter(newEndDate) || newStartDate.isEqual(newEndDate))
                {
                    JOptionPane.showMessageDialog(
                            null, 
                            "Invalid Date or date is in the past", 
                            "Error Date Query", 
                            JOptionPane.ERROR_MESSAGE
                    );
                }
                else
                {
                    updateComboBox(newStartDate, newEndDate);

                    if(
                            newStartDate.equals(selectedRecord.getStartDate())
                            && newEndDate.equals(selectedRecord.getEndDate())
                    )
                    {
                        roomIdCombo.addItem(selectedRecord.getBookedRoom());
                        roomIdCombo.setSelectedItem(selectedRecord.getBookedRoom());
                    }
                    days.setText(String.valueOf(calculator.dateDifference(newStartDate, newEndDate)));
                    validDate = true;
                    ImageIcon successIcon = new ImageIcon("src/img/successSmall.png");
                    JOptionPane.showMessageDialog(null, 
                                                  "Available Room Updated, feel free to select a new room", 
                                                  "Success Date Query", 
                                                  JOptionPane.INFORMATION_MESSAGE, 
                                                  successIcon);
                }
            }
        }
    }//GEN-LAST:event_dateValidateButtonActionPerformed

    private void resetButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_resetButtonActionPerformed
        bookings = new BookingsConfig().bookings;
        searchField.setText("");
        this.setVisible(false);
        this.setVisible(true);
    }//GEN-LAST:event_resetButtonActionPerformed

    private void startDatePropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_startDatePropertyChange
        validDate = false;
    }//GEN-LAST:event_startDatePropertyChange

    private void endDatePropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_endDatePropertyChange
        validDate = false;
    }//GEN-LAST:event_endDatePropertyChange

    private void deleteButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteButtonActionPerformed
        if(deleteButton.isEnabled())
        {
            bookings = new BookingsConfig().bookings;
            String selectedBooking = bookingId.getText();

            // Confirmation on Deletion
            if (
                    JOptionPane.showConfirmDialog
                    (
                        null,
                        "This action can't be undo. Are you sure you want to cancel booking#ID" + String.valueOf(selectedBooking),
                        "Confirmation",
                        JOptionPane.YES_NO_OPTION
                    ) == JOptionPane.YES_OPTION
            )
            {
                // Execute on confirmation
                for(Booking record: bookings)
                {
                    if(record.getBookingId().equals(selectedBooking))
                    {
                        if(record.getStatus().equals("CheckIn"))
                        {
                            for(Room room: rooms)
                            {
                                if(room.getRoomNumber().equals(record.getBookedRoom()))
                                {
                                    room.setStatus("Available");
                                }
                            }
                        }
                        bookings.remove(record);
                        break;
                    }
                }
                new RoomsUpdate().updateRoomDatabase(rooms);
                new BookingController().updateBookingDatabase(bookings);
                ImageIcon successIcon = new ImageIcon("src/img/successSmall.png");
                JOptionPane.showMessageDialog(
                        null, 
                        "Record Deleted", 
                        "Success Deletion", 
                        JOptionPane.INFORMATION_MESSAGE, 
                        successIcon
                );
                setVisible(false);
                setVisible(true);
            }
        }
    }//GEN-LAST:event_deleteButtonActionPerformed

    private void updateButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updateButtonActionPerformed
        bookings = new BookingsConfig().bookings;
        if(validDate && updateButton.isEnabled())
        {
            // Initialization + Value retrieval
            boolean proceedable = true;
            String selectedBooking = bookingId.getText();
            char newGender = maleButton.isSelected() ? 'M' : 'F'; 
            String newCusName = customerName.getText().trim();
            String newPersonalId = personalId.getText().trim();
            String newEmail = email.getText().trim();
            String newContactNumber = contactNumber.getText().trim();
            
            // Block process if there are empty field
            if(
                newCusName.isEmpty() ||
                newPersonalId.isEmpty() ||
                newEmail.isEmpty() ||
                newContactNumber.isEmpty()
            )
            {
                JOptionPane.showMessageDialog(
                    null, 
                    "There are empty field that are required to be filled", 
                    "Error Update", 
                    JOptionPane.ERROR_MESSAGE
                );
                proceedable = false;
            }
            else
            {
                // Block process for invalid email value
                if(!EmailValidator.isValidEmail(newEmail))
                {
                    JOptionPane.showMessageDialog(
                        null, 
                        "Email entered is in invalid format", 
                        "Error Update", 
                        JOptionPane.ERROR_MESSAGE
                    );
                    proceedable = false;
                }
            }
            
            // Execute after validation to update record
            if(proceedable)
            {
                Customer newCustomer = new Customer();
                for(Booking record: bookings)
                {
                    if(record.getBookingId().equals(selectedBooking))
                    {
                        newCustomer.setName(newCusName);
                        newCustomer.setPersonalId(newPersonalId);
                        newCustomer.setGender(newGender);
                        newCustomer.setEmail(newEmail);
                        newCustomer.setContactNumber(newContactNumber);
                        record.setCustomer(newCustomer);
                        record.setRoom(roomIdCombo.getModel().getSelectedItem().toString());
                        record.setStartDate(startDate.getDate().toInstant().atZone(ZoneId.systemDefault()).toLocalDate());
                        record.setEndDate(endDate.getDate().toInstant().atZone(ZoneId.systemDefault()).toLocalDate());
                    }
                }
                new BookingController().updateBookingDatabase(bookings);
                ImageIcon successIcon = new ImageIcon("src/img/successSmall.png");
                JOptionPane.showMessageDialog(
                        null, 
                        "Record Updated", 
                        "Success Update", 
                        JOptionPane.INFORMATION_MESSAGE, 
                        successIcon
                );
                setVisible(false);
                setVisible(true);
            }
        }
        // Date is not validated or record is not permitted to be edit
        else
        {
            System.out.println("Date is not validated");
            JOptionPane.showMessageDialog(
                    null, 
                    "Please Validate Date or Record is unable to be updated (CheckOut)", 
                    "Error Update", 
                    JOptionPane.ERROR_MESSAGE
            );
        }
    }//GEN-LAST:event_updateButtonActionPerformed

    private void requestSearchButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_requestSearchButtonActionPerformed
        // Initialization
        boolean proceedable = true;
        LocalDate newStartDate = LocalDate.now();
        LocalDate newEndDate = LocalDate.now();
        try
        {
            try
            {
                newStartDate = requestStartDate.getDate().toInstant().atZone(ZoneId.systemDefault()).toLocalDate();
                newEndDate = requestEndDate.getDate().toInstant().atZone(ZoneId.systemDefault()).toLocalDate();
            }
            // Empty date error handling
            catch(NullPointerException e)
            {
                validNewDate = false;
                JOptionPane.showMessageDialog(
                    null, 
                    "End date is not selected", 
                    "Reservation error", 
                    JOptionPane.ERROR_MESSAGE
                );
                proceedable = false;
            }
            
            // Date & Duration Validation
            LocalDate now = LocalDate.now();
            if(
                    (newStartDate.getMonthValue() - now.getMonthValue()) > 1
            )
            {
                validNewDate = false;
                JOptionPane.showMessageDialog(
                    null, 
                    "Booking cannot be reserve more than 1 month period", 
                    "Reservation error", 
                    JOptionPane.ERROR_MESSAGE
                );
                proceedable = false;
            }
            else
            {
               if(
                  calculator.dateDifference(newStartDate, newEndDate) > 7     
               )
               {
                   validNewDate = false;
                    JOptionPane.showMessageDialog(
                        null, 
                        "Reservation cannot be more than a week / 7 days.", 
                        "Reservation error", 
                        JOptionPane.ERROR_MESSAGE
                    );
                    proceedable = false;
               }
               else
               {
                   if(
                           now.isAfter(newStartDate)
                   )
                   {
                        validNewDate = false;
                        JOptionPane.showMessageDialog(
                            null, 
                            "Reservation cannot be made in any days in the past.", 
                            "Reservation error", 
                            JOptionPane.ERROR_MESSAGE
                        );
                        proceedable = false;
                   }
               }
            }
        }
        catch(HeadlessException e)
        {
            validNewDate = false;
            JOptionPane.showMessageDialog(
                null, 
                "Value is not Date", 
                "Error Selection", 
                JOptionPane.ERROR_MESSAGE
            );
            proceedable = false;
        }

        if (proceedable)
        {
            if (newStartDate.isAfter(newEndDate) || newStartDate.isEqual(newEndDate))
            {
                validNewDate = false;
                JOptionPane.showMessageDialog(
                        null, 
                        "Invalid Date", 
                        "Error Date Query", 
                        JOptionPane.ERROR_MESSAGE
                );
                proceedable=false;
            }
            
            if(proceedable)
            {
                validNewDate = true;
                ArrayList<String> invalidRoom = new ArrayList<>();
                ArrayList<String> validRoom = new ArrayList<>();
                
                for(Room room: rooms)
                {
                    validRoom.add(room.getRoomNumber());
                }
                
                for(Booking record: bookings)
                {
                    if(!
                        ((newStartDate.isBefore(record.getStartDate()) 
                        && newEndDate.isBefore(record.getStartDate()))
                        ||
                        (newStartDate.isAfter(record.getEndDate())
                        && newEndDate.isAfter(record.getEndDate())))
                        &&
                        (record.getStatus().equals("Booked")
                         ||
                         record.getStatus().equals("CheckIn"))
                    )
                    {
                        for(Room room: rooms)
                        {
                            if(
                                    room.getRoomNumber().equals(record.getBookedRoom())
                                    ||
                                    room.getMaintenance()
                            )
                            {
                                invalidRoom.add(room.getRoomNumber());
                            }
                        }
                    }
                }
                HashSet<String> uniqueInvalid = new HashSet<>(invalidRoom);
                
                validRoom.removeAll(uniqueInvalid);
                
                UUID newRecordId = UUID.randomUUID();
                requestAvailableRoomCombo.removeAllItems();
                requestAvailableRoomCombo.setModel(new DefaultComboBoxModel<>(validRoom.toArray(String[]::new)));
                requestBookingID.setText(newRecordId.toString());
                requestDays.setText(String.valueOf(calculator.dateDifference(newStartDate, newEndDate)));
                requestMaleButton.doClick();
            }
        }
    }//GEN-LAST:event_requestSearchButtonActionPerformed

    private void requestCustomerEmailKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_requestCustomerEmailKeyPressed
        if(evt.getKeyCode() == KeyEvent.VK_ENTER)
        {
            addRecord();
        }
    }//GEN-LAST:event_requestCustomerEmailKeyPressed

    private void addButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addButtonActionPerformed
        addRecord();
    }//GEN-LAST:event_addButtonActionPerformed

    private void requestStartDatePropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_requestStartDatePropertyChange
        validNewDate = false;
    }//GEN-LAST:event_requestStartDatePropertyChange

    private void requestEndDatePropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_requestEndDatePropertyChange
        validNewDate = false;
    }//GEN-LAST:event_requestEndDatePropertyChange

    private void bookingTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_bookingTableMouseClicked
        try
        {
            int selectedRow = bookingTable.getSelectedRow();
            if (selectedRow >= 0)
            {
                String selectedBookingId = String.valueOf(
                    bookingTable.getModel().getValueAt(selectedRow, 0)
                );
                for(Booking record: bookings)
                {
                    if(record.getBookingId().equals(selectedBookingId))
                    {
                        recordNumber = selectedRow;
                        manipulateForm(recordNumber);
                        break;
                    }
                }
            }
        }
        catch(NumberFormatException excep)
        {
            System.err.println("No row being selected");
        }
    }//GEN-LAST:event_bookingTableMouseClicked

    private void requestContactNumberKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_requestContactNumberKeyPressed
        // TODO add your handling code here:
    }//GEN-LAST:event_requestContactNumberKeyPressed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Bookings.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Bookings.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Bookings.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Bookings.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Bookings().setVisible(true);
            }
        });
    }
    
     //  Add new booking record
    private void addRecord()
    {
        //    Initialization    
        boolean proceedable = true;
        
        String newId = "";
        LocalDate newStartDate = LocalDate.now();
        LocalDate newEndDate = LocalDate.now();
        String newRoomId = "";
        String newCusName = "";
        String newPersonalId = "";
        char newGender = '-';
        String newCusEmail = "";
        String newContactNumber = "";
        
        try
        {
            // Data Retrieval
            newId = requestBookingID.getText().trim();
            newStartDate = requestStartDate.getDate().toInstant().atZone(ZoneId.systemDefault()).toLocalDate();
            newEndDate = requestEndDate.getDate().toInstant().atZone(ZoneId.systemDefault()).toLocalDate();
            newRoomId = String.valueOf(requestAvailableRoomCombo.getModel().getSelectedItem());
            newCusName = requestCustomerName.getText().trim();
            newPersonalId = requestPersonalID.getText().trim();
            newGender = (requestMaleButton.isSelected()) ? 'M' : 'F';
            newCusEmail = requestCustomerEmail.getText().trim();
            newContactNumber = requestContactNumber.getText().trim();
            
            // Empty field blockage
            if(
               newCusName.isEmpty() ||
               newPersonalId.isEmpty() ||
               newCusEmail.isEmpty() ||
               newContactNumber.isEmpty()
            )
            {
                JOptionPane.showMessageDialog(
                    null, 
                    "There are empty field", 
                    "Error Add Request", 
                    JOptionPane.ERROR_MESSAGE
                );
                proceedable = false;
            }
            // Invalid Email format Blockage
            else
            {
                if(!EmailValidator.isValidEmail(newCusEmail))
                {
                    JOptionPane.showMessageDialog(
                        null, 
                        "Email is in invalid format", 
                        "Invalid Email", 
                        JOptionPane.ERROR_MESSAGE
                    );
                    proceedable = false;
                }
            }
        }
        catch(HeadlessException e)
        {
            System.err.println("Some Error Occured");
        }
        
        // Execute the booking addition
        if(proceedable)
        {
            if(validNewDate)
            {
                Customer newCustomer = new Customer(
                        newCusName, 
                        newPersonalId, 
                        newGender, 
                        newCusEmail,
                        newContactNumber
                );
                Booking newBookingRequest = new Booking(
                    newId,
                    newCustomer,
                    newRoomId,
                    "Booked",
                    newStartDate,
                    newEndDate,
                    LocalDateTime.now().format(datetimeFormatter),
                    0f,
                    false
                );
                bookings.add(newBookingRequest);
                new BookingController().updateBookingDatabase(bookings);
                ImageIcon successIcon = new ImageIcon("src/img/successSmall.png");
                JOptionPane.showMessageDialog(null, 
                                              "New Booking Record Added", 
                                              "Success", 
                                              JOptionPane.INFORMATION_MESSAGE, 
                                              successIcon);
                setVisible(false);
                setVisible(true);
            }
            // Date is not being validated
            else
            {
                JOptionPane.showMessageDialog(
                    null, 
                    "Date is not validated, please click search button", 
                    "Unvalidated date", 
                    JOptionPane.ERROR_MESSAGE
                );  
            }
        }
    }
    
    // Update View / Edit / Delete Booking Form
    private void manipulateForm(int index)
    {
        // Set Record Number to valid number        
        recordNumber = index;
        if(recordNumber >= bookings.size())
        {
            recordNumber = 0;
        }
        else
        {
            if(recordNumber < 0)
            {
                recordNumber = bookings.size() - 1;
            }
        }
        
        //  When there are booking records      
        if(!bookings.isEmpty())
        {
            updateComboBox(bookings.get(recordNumber).getStartDate(), bookings.get(recordNumber).getEndDate());
            bookingId.setText(String.valueOf(bookings.get(recordNumber).getBookingId()));
            createdDate.setText(bookings.get(recordNumber).getCreatedTime());
            customerName.setText(bookings.get(recordNumber).getCustomer().getName());
            personalId.setText(bookings.get(recordNumber).getCustomer().getPersonalId());
            if (bookings.get(recordNumber).getCustomer().getGender() == 'M')
            {
                maleButton.doClick();
            }
            else
            {
                femaleButton.doClick();
            }
            dateValidateButton.setEnabled(
                    (
                            bookings.get(recordNumber).getStatus().equals("Cancelled")
                            ||
                            bookings.get(recordNumber).getStatus().equals("CheckOut")
                    ) ? false : true
            );
            email.setText(bookings.get(recordNumber).getCustomer().getEmail());
            contactNumber.setText(bookings.get(recordNumber).getCustomer().getContactNumber());
            roomIdCombo.getModel().setSelectedItem(bookings.get(recordNumber).getBookedRoom());
            bookingStatus.setText(bookings.get(recordNumber).getStatus());
            days.setText(String.valueOf(bookings.get(recordNumber).getStayDays()));
            startDate.setDate(Date.from(bookings.get(recordNumber).getStartDate().atStartOfDay(ZoneId.systemDefault()).toInstant()));
            endDate.setDate(Date.from(bookings.get(recordNumber).getEndDate().atStartOfDay(ZoneId.systemDefault()).toInstant()));
            updateButton.setEnabled(true);
            deleteButton.setEnabled(true);
        }
        //  No booking records loaded      
        else
        {
            bookingId.setText("-");
            createdDate.setText("-");
            customerName.setText("");
            personalId.setText("");
            dateValidateButton.setEnabled(false);
            email.setText("");
            contactNumber.setText("");
            roomIdCombo.getModel().setSelectedItem("None");
            bookingStatus.setText("");
            days.setText("");
            startDate.setDate(null);
            endDate.setDate(null);
            updateButton.setEnabled(false);
            deleteButton.setEnabled(false);
        }
    }
    
    // Search for record based on statement id, customer name and room id
    private void searchRecord()
    {
        ArrayList<Booking> searchResult = new ArrayList<>();
        String searchKey = searchField.getText().trim();
        for(Booking record: bookings)
        {
            if(
                record.getBookedRoom().equals(searchKey)
                ||
                record.getCustomer().getName().equals(searchKey)
                ||
                record.getBookingId().equals(searchKey)
            )
            {
                searchResult.add(record);
            }
        }
        
        // No related information found
        if(searchResult.isEmpty())
        {
            JOptionPane.showMessageDialog(
                    null, 
                    "No result found", 
                    "Error Search", 
                    JOptionPane.ERROR_MESSAGE
            );
        }
        else
        {
            bookings = searchResult;
            manipulateForm(0);
        }
    }
    
    private void updateComboBox(LocalDate startingDate, LocalDate endingDate)
    {
        ArrayList<String> invalidRoom = new ArrayList<>();
        ArrayList<String> validRoom = new ArrayList<>();
                
        for(Room room: rooms)
        {
            validRoom.add(room.getRoomNumber());
        }

        for(Booking record: bookings)
        {
            if(!
                ((startingDate.isBefore(record.getStartDate()) 
                && endingDate.isBefore(record.getStartDate()))
                ||
                (startingDate.isAfter(record.getEndDate())
                && endingDate.isAfter(record.getEndDate())))
                &&
                (record.getStatus().equals("Booked")
                 ||
                 record.getStatus().equals("CheckIn"))
            )
            {
                for(Room room: rooms)
                {
                    if(
                            room.getRoomNumber().equals(record.getBookedRoom())
                            ||
                            room.getMaintenance()
                    )
                    {
                        invalidRoom.add(room.getRoomNumber());
                    }
                }
            }
        }
        HashSet<String> uniqueInvalid = new HashSet<>(invalidRoom);

        validRoom.removeAll(uniqueInvalid);

        roomIdCombo.removeAllItems();
        roomIdCombo.setModel(new DefaultComboBoxModel<>(validRoom.toArray(String[]::new)));
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel BookingMenu;
    private javax.swing.JLabel CheckinMenu;
    private javax.swing.JLabel CheckoutMenu;
    private javax.swing.JLabel RoomsMenu;
    private javax.swing.JButton addButton;
    private javax.swing.JLabel bookingId;
    private javax.swing.JLabel bookingStatus;
    private javax.swing.JTable bookingTable;
    private javax.swing.JTextField contactNumber;
    private javax.swing.JLabel createdDate;
    private javax.swing.JTextField customerName;
    private javax.swing.JButton dateValidateButton;
    private javax.swing.JLabel days;
    private javax.swing.JButton deleteButton;
    private javax.swing.JTextField email;
    private org.jdesktop.swingx.JXDatePicker endDate;
    private javax.swing.JRadioButton femaleButton;
    private javax.swing.JButton firstQuery;
    private javax.swing.ButtonGroup genderGroup;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel20;
    private javax.swing.JLabel jLabel21;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel30;
    private javax.swing.JLabel jLabel31;
    private javax.swing.JLabel jLabel32;
    private javax.swing.JLabel jLabel33;
    private javax.swing.JLabel jLabel34;
    private javax.swing.JLabel jLabel35;
    private javax.swing.JLabel jLabel36;
    private javax.swing.JLabel jLabel37;
    private javax.swing.JLabel jLabel38;
    private javax.swing.JLabel jLabel39;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JSeparator jSeparator4;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JButton lastQuery;
    private javax.swing.JButton logouButton;
    private javax.swing.JRadioButton maleButton;
    private javax.swing.JButton nextQuery;
    private javax.swing.JTextField personalId;
    private javax.swing.JButton previousQuery;
    private javax.swing.JComboBox<String> requestAvailableRoomCombo;
    private javax.swing.JLabel requestBookingID;
    private javax.swing.JTextField requestContactNumber;
    private javax.swing.JTextField requestCustomerEmail;
    private javax.swing.JTextField requestCustomerName;
    private javax.swing.JLabel requestDays;
    private org.jdesktop.swingx.JXDatePicker requestEndDate;
    private javax.swing.JRadioButton requestFemaleButton;
    private javax.swing.ButtonGroup requestGenderGroup;
    private javax.swing.JRadioButton requestMaleButton;
    private javax.swing.JTextField requestPersonalID;
    private javax.swing.JButton requestSearchButton;
    private org.jdesktop.swingx.JXDatePicker requestStartDate;
    private javax.swing.JButton resetButton;
    private javax.swing.JComboBox<String> roomIdCombo;
    private javax.swing.JButton searchButton;
    private javax.swing.JTextField searchField;
    private org.jdesktop.swingx.JXDatePicker startDate;
    private javax.swing.JButton updateButton;
    // End of variables declaration//GEN-END:variables
    
    //  Used to launch page
    public void run()
    {
        new Bookings().setVisible(true);
    }
}
